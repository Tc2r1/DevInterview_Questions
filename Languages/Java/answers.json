{
  "answers": [
    {
      "answer": "It is what specifies the return type may vary in the same direction as the subclass.",
      "details": "Now, since java5, it is possible to override any method by changing the return type if the return type of the subclass overriding method is subclass type. It is known as Covariant Return Type."
    },
    {
      "answer": "It is a variable that is not initialized at the time of declaration.",
      "details": "We can't initialize the final blank variable directly. Instead, we have to initialize it by using the class constructor. It is useful in the case when the user has some data which must not be changed by others, for example, PAN Number."
    },
    {
      "answer": "It is a variable used to restrict the user from updating it.",
      "details": "If we initialize the Final Variable, we can't change its value. In other words, we can say that the final variable once assigned to a value, can never be changed after that. The final variable which is not assigned to any value can only be assigned through the class constructor."
    },
    {
      "answer": "It is the polymorphism technique which allows us to create multiple methods with the same name but different signature.",
      "details": "Method Overloading increases the readability of the program. Method overloading is performed to figure out the program quickly."
    },
    {
      "answer": "It is the process of defining a method in a subclass having same name & type signature as a method in its superclass.",
      "details": "Method overriding is one of the way by which java achieve Run Time Polymorphism. It define a behavior that's specific to the subclass type, which means a subclass can implement a parent class method based on its requirement."
    },
    {
      "answer": "It is called where object has its own lifecycle and child object cannot belong to another parent object.",
      "details": "Aggregation occurs when objects have their own life cycle and child object can associate with only one parent object."
    },
    {
      "answer": "It is keyword used by the method to refer to the object that invoked it.",
      "details": "this keyword can be used inside any method to refer to the current object. this is always a reference to the object on which the method was invoked"
    }
  ]
}
